from .base_parameters import Parameters

class NeoHookean(Parameters):
    """
    An example non-dimensional parameter set for a neo-Hookean material
    """
    def __init__(self):

        super().__init__()

        """
        Physical parameters.
        """
        self.physical = {
            "R": 1,         # initial radius of sample
            "phi_0": 0.8,   # initial fluid fraction
            "k_0": 1,       # initial permeability
            "lam_z": 0.5,   # axial stretch
            "F": -5,        # force on the platten
            "E_m": 1,       # shear modulus of the matrix
            "nu_m": 0,      # Poisson's ratio of the matrix
            "t_end": 10    # end-time of simulation
        }

        """
        computational parameters
        """
        self.computational = {
            "N": 40,            # number of spatial grid points
            "Nt": 100,          # number of time steps
            "t_spacing": 'log'  # lin or log spacing between time steps
        }


class DimensionalNeoHookean(Parameters):
    """
    An example non-dimensional parameter set for a neo-Hookean material.
    In this example, the dimensional parameter values are stored in a
    dictionary called dimensional.  The dictionary of physical parameters
    needed in the code is generated by non-dimensionalising the equations.
    """

    def __init__(self):
        
        super().__init__()

        """
        Define the dimensional parameters.  Here, we use SI units
        """
        self.dimensional = {
            "R": 5e-3,        # initial radius (m)
            "E_m": 50e3,      # stiffness of gel matrix (Pa)
            "nu_m": 0,        # Poisson's ratio of the material
            "k_0": 2e-13,     # initial hydraulic conductivity (m2 / Pa / s)
            "phi_0": 0.8,     # initial porosity (-)
            "lam_z": 0.5,     # axial strain (-)
            "F": -1,          # applied force (N)
            "t_end": 1e4,     # final time (s)
        }

        """
        Define the computational parameters
        """
        self.computational = {
            "N": 40,
            "Nt": 100,
            "t_spacing": 'log'
        }

        """
        Compute the scaling factors that are needed to non-dimensionalise
        the paramters
        """
        self.compute_scaling_factors()
    
        """
        Computes dicts of non-dim parameters.  For a neo-Hookean material,
        we can use the non_dimensionalise method from the superclass without
        modifications.
        """
        self.non_dimensionalise()        
    

class FibreReinforced(Parameters):
    """
    An example non-dimensional parameter set for a fibre-reinforced 
    neo-Hookean material
    """
    def __init__(self):

        super().__init__()

        """
        Physical parameters. 
        """

        self.physical = {
            "R": 1,         # initial radius of sample
            "phi_0": 0.8,   # initial fluid fraction
            "k_0": 1,       # initial permeability
            "lam_z": 0.5,   # axial stretch
            "F": -5,        # force on the platten
            "G_m": 1,       # shear modulus of the matrix
            "G_f": 100,     # shear modulus of the fibres
            "alpha_f": 0.5, # volume fraction of fibres
            "t_end": 10,    # end-time of simulation
        }

        """
        computational parameters
        """
        self.computational = {
            "N": 40,            # number of spatial grid points
            "Nt": 100,          # number of time steps
            "t_spacing": 'log'  # lin or log spacing between time steps
        }


class FibreRecruitment(Parameters):
    """
    An example non-dimensional parameter set for a fibre-reinforced 
    neo-Hookean material
    """
    def __init__(self):

        super().__init__()

        """
        Physical parameters. 
        """

        self.physical = {
            "R": 1,         # initial radius of sample
            "phi_0": 0.8,   # initial fluid fraction
            "k_0": 1,       # initial permeability
            "lam_z": 0.5,   # axial stretch
            "F": -5,        # force on the platten
            "G_m": 1,       # shear modulus of the matrix
            "E_f": 100,     # Young's modulus of the fibres
            "lam_m": 1.2,   # Max recruitment stretch
            "alpha_f": 0.5, # volume fraction of fibres
            "t_end": 10,    # end-time of simulation
        }

        """
        computational parameters
        """
        self.computational = {
            "N": 40,            # number of spatial grid points
            "Nt": 100,          # number of time steps
            "t_spacing": 'log'  # lin or log spacing between time steps
        }